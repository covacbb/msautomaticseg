#!/usr/bin/env python
# coding: utf-8

import os
import sys
import ants

def multi_affine_registration(fixed_image, moving_image, levels=2, steps=50):
    """
    Performs multi-resolution affine registration with an initial rigid registration.

    Parameters:
        fixed_image (ants.ANTsImage): The fixed (reference) image.
        moving_image (ants.ANTsImage): The moving image to be registered to the fixed image.
        levels (int, optional): The number of resolution levels for multi-resolution registration. Default is 2.
        steps (int, optional): The number of iterations for registration at each resolution level. Default is 50.
        verbose (bool, optional): If True, prints detailed registration progress. Default is False.

    Returns:
        str: Path to the forward transform file generated by the registration process.
    """
    # Rigid registration
    rigid_transform = ants.registration(fixed=fixed_image, moving=moving_image, type_of_transform='Rigid',
                                        grad_step=0.2, reg_iterations=(steps,), verbose=True)

    # Multi-resolution affine registration
    affine_transform = ants.registration(fixed=fixed_image, moving=moving_image, initial_transform=rigid_transform['fwdtransforms'][0],
                                         type_of_transform='Affine', metric='mattes', grad_step=0.1,
                                         reg_iterations=(steps,), shrink_factors=(2**i for i in range(levels, 0, -1)),
                                         smoothing_sigmas=(1, 0), verbose=True)
                                        #shrink_factors=tuple(2**i for i in range(levels, 0, -1)),
    print("Affine transform completed")
    return affine_transform['fwdtransforms'][0]

def resample_image(fixed, moving, transform):
    """
    Resamples the moving image to match the space of the fixed image using a given transform.

    Parameters:
        fixed (ants.ANTsImage): The fixed (reference) image.
        moving (ants.ANTsImage): The moving image to be resampled.
        transform (str or list): The transformation or list of transformations to apply.
        interpolator (str, optional): Interpolation method for resampling. Default is 'bSpline'.
                                      Common options: 'linear', 'nearestNeighbor', 'bSpline'.

    Returns:
        ants.ANTsImage: The resampled image in the fixed image's space, or None if an error occurs.
    """
    print("Creating image")

    # Resample the moving image to the space of the fixed image using the provided transform
    try:
        resampled_image = ants.apply_transforms(fixed=fixed, moving=moving, transformlist=transform,
                                                interpolator='bSpline', default_value=0)
                                                #interpolator='linear'
        print("Resampling completed")
        return resampled_image
      
    except Exception as err:
        print(f"Error during resampling: {err}")
        return None

def read_image(image_path):
    """
    Reads an image from the specified file path using ANTsPy.

    Parameters:
        image_path (str): The file path to the image to read.
        raise_error (bool, optional): If True, raises an exception on failure. If False, returns None. Default is False.

    Returns:
        ants.ANTsImage: The loaded image, or None if the file cannot be read and raise_error is False.
    """
    try:
        return ants.image_read(image_path)
    except Exception as e:
        print(f"Error reading {image_path}: {e}")
        if raise_error:
            raise
        return None

